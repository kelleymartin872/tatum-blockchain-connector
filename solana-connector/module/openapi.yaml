openapi: 3.0.0
servers:
  - url: 'https://api-eu1.tatum.io'
info:
  version: 1.0.1
  title: Tatum Solana API
tags:
  - description: |
      <p>Solana is a blockchain network focused on fast transactions and high throughput. It uses a unique method of ordering transactions to improve its speed. Users can pay their transaction fees and interact with smart contracts with SOL, the network's native cryptocurrency.<br/>
      <b>For now, there is a rate limitation applied for all projects for Solana to 40 req/s for any chain.</b><br/>
      Tatum supports 2 chains:
      <ul><li>Mainnet BETA - a regular live chain
      <li>Devnet - a chain used for testing purposes. Coins on the test chain have no value and can be obtained from
      a faucet, e.g. <a target="_blank" href="https://solfaucet.com/">https://solfaucet.com/</a></li></ul></p>
    name: Blockchain / Solana
paths:
  /v3/solana/wallet:
    get:
      description: |
        <h4>1 credit per API call.</h4><br/>
        <p>Generate Solana private key and account address.</p>
      operationId: SolanaGenerateWallet
      responses:
        200:
          content:
            application/json:
              schema:
                type: object
                properties:
                  address:
                    description: Generated account address.
                    example: FykfMwA9WNShzPJbbb9DNXsfgDgS3XZzWiFgrVXfWoPJ
                    type: string
                  privateKey:
                    description: Generated private key for account.
                    example: 3abc79a31093e4cfa4a724e94a44906cbbc3a32e2f75f985a28616676a5dbaf1de8d82a7e1d0561bb0e1b729c7a9b9b1708cf2803ad0ca928a332587ace391ad
                    type: string
          description: OK
        400: &API400
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error400"
          description: Bad Request. Validation failed for the given object in the HTTP Body or Request parameters.
        401: &API401
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/Error401NotActive"
                  - $ref: "#/components/schemas/Error401Invalid"
          description: Unauthorized. Not valid or inactive subscription key present in the HTTP Header.
        500: &API500
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error500"
          description: Internal server error. There was an error on the server during the processing of the request.
      security:
        - X-Api-Key: [ ]
      x-code-samples:
      summary: Generate Solana wallet
      tags:
        - Blockchain / Solana
  /v3/solana/web3/{xApiKey}:
    post:
      description: |
        <h4>2 credits per API call.</h4><br/>
        <p>Use this endpoint URL as a http-based JSON RPC driver to connect directly to the Solana node provided by Tatum.
        To learn more about Solana JSON RPC, please visit <a href="https://docs.solana.com/developing/clients/jsonrpc-api" target="_blank">Solana developer's guide.</a></p>
      operationId: SolanaWeb3Driver
      parameters:
        - description: "Tatum X-API-Key used for authorization."
          in: path
          name: xApiKey
          required: true
          schema:
            type: string
            example: asdlkfjnqunalkwjfnq2oi303294857k
      requestBody:
        content:
          application/json:
            schema:
              type: object
              description: Any valid JSON RPC method content body.
              example: { "jsonrpc": "2.0","method": "getVersion","params": [ ],"id": 2 }
        required: true
      responses:
        200:
          content:
            application/json:
              schema:
                type: object
                description: Any valid JSON RPC response.
                example: {"jsonrpc":"2.0","result":{"solana-core": "1.8.5"},"id":1}
          description: OK
        400:
          <<: *API400
        401:
          <<: *API401
        500:
          <<: *API500
      x-code-samples:
      summary: JSON RPC HTTP driver
      tags:
        - Blockchain / Solana
  /v3/solana/block/current:
    get:
      description: "<h4>1 credit per API call.</h4><br/><p>Get Solana current block number. This is the number of the latest block in the blockchain.</p>"
      operationId: SolanaGetCurrentBlock
      responses:
        200:
          content:
            application/json:
              schema:
                type: number
                description: Current block number
                example: 6491272
          description: OK
        401:
          <<: *API401
        500:
          <<: *API500
      security:
        - X-Api-Key: [ ]
      x-code-samples:
      summary: Get current block number
      tags:
        - Blockchain / Solana
  /v3/solana/block/{height}:
    get:
      description: "<h4>1 credit per API call.</h4><br/><p>Get Solana block by block hash or block number.</p>"
      operationId: SolanaGetBlock
      parameters:
        - description: "Block number"
          in: path
          name: height
          required: true
          schema:
            type: number
            example: 6470657
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SolanaBlock"
          description: OK
        400:
          <<: *API400
        401:
          <<: *API401
        500:
          <<: *API500
      security:
        - X-Api-Key: [ ]
      x-code-samples:
      summary: Get Solana block by hash
      tags:
        - Blockchain / Solana
  /v3/solana/account/balance/{address}:
    get:
      description: "<h4>1 credit per API call.</h4><br/><p>Get Solana account balance in SOL. This method does not prints any balance of the SLP or NFT tokens on the account.</p>"
      operationId: SolanaGetBalance
      parameters:
        - description: "Account address"
          in: path
          name: address
          required: true
          schema:
            type: string
            example: "FykfMwA9WNShzPJbbb9DNXsfgDgS3XZzWiFgrVXfWoPJ"
      responses:
        200:
          content:
            application/json:
              schema:
                type: object
                properties:
                  balance:
                    type: string
                    description: Balance in SOL
                    example: "10.52"
          description: OK
        400:
          <<: *API400
        401:
          <<: *API401
        500:
          <<: *API500
      security:
        - X-Api-Key: [ ]
      x-code-samples:
      summary: Get Solana Account balance
      tags:
        - Blockchain / Solana
  /v3/solana/transaction/{hash}:
    get:
      description: "<h4>2 credit per API call.</h4><br/><p>Get Solana transaction by transaction hash.</p>"
      operationId: SolanaGetTransaction
      parameters:
        - description: "Transaction hash"
          in: path
          name: hash
          required: true
          schema:
            type: string
            example: "5oSXZkPregqGhHrTcbWhgHQJETvBHtBYssuuCMJ3qroAgHsHndsr8fyY8kY76AgwmMaZBZW8ThHAXwjDaUSweApS"
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SolanaTx"
          description: OK
        400:
          <<: *API400
        401:
          <<: *API401
        403:
          description: Forbidden. The request is authenticated, but it is not possible to required perform operation due to logical error or invalid permissions.
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/Error403TxNotFound"
        500:
          <<: *API500
      security:
        - X-Api-Key: [ ]
      x-code-samples:
      summary: Get Solana Transaction
      tags:
        - Blockchain / Solana
  /v3/solana/transaction:
    post:
      description: |
        <h4>2 credits per API call.</h4><br/>
        <p>Send SOL from account to account.<br/><br/>
        This operation needs the private key of the blockchain address. Every time the funds are transferred, the transaction must be signed with the corresponding private key.
        No one should ever send it's own private keys to the internet because there is a strong possibility of stealing keys and loss of funds. In this method, it is possible to enter privateKey
        or signatureId. PrivateKey should be used only for quick development on testnet versions of blockchain when there is no risk of losing funds. In production,
        <a href="https://github.com/tatumio/tatum-kms" target="_blank">Tatum KMS</a> should be used for the highest security standards, and signatureId should be present in the request.
        Alternatively, using the Tatum client library for supported languages or Tatum Middleware with a custom key management system is possible.
        </p>
      operationId: SolanaBlockchainTransfer
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - $ref: "#/components/schemas/TransferSolanaBlockchain"
                - $ref: "#/components/schemas/TransferSolanaBlockchainKMS"
        required: true
      responses:
        200:
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/TransactionHashKMS"
                  - $ref: "#/components/schemas/SignatureId"
          description: OK
        400:
          <<: *API400
        401:
          <<: *API401
        403:
          description: Forbidden. The request is authenticated, but it is not possible to required perform operation due to logical error or invalid permissions.
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/Error403SolanaBroadcast"
                  - $ref: "#/components/schemas/Error403SolanaGasPrice"
                  - $ref: "#/components/schemas/Error403SolanaTxBody"
                  - $ref: "#/components/schemas/Error403SolanaGasCalculation"
                  - $ref: "#/components/schemas/Error403SolanaTxHash"
                  - $ref: "#/components/schemas/Error403SolanaTxSign"
        500:
          <<: *API500
      security:
        - X-Api-Key: [ ]
      x-code-samples:
      summary: Send SOL from account to account
      tags:
        - Blockchain / Solana
components:
  securitySchemes:
    X-Api-Key:
      description: |
        To maintain the highest security level, Tatum requires X-API-Key HTTP header.
        This X-API-Key represents identification of the plan and can be used by 1 developer or per environment.
        Each X-API-Key is bound to the test or production blockchains.
      in: header
      name: x-api-key
      type: apiKey
  schemas:
    SolanaBlock:
      type: object
      properties:
        difficulty:
          description: Difficulty for this block.
          type: string
          example: "3296820833"
        extraData:
          description: The 'extra data' field of this block.
          type: string
          example: "0x"
        gasLimit:
          description: The maximum gas allowed in this block.
          type: number
          example: 8000000
        gasUsed:
          description: The total used gas by all transactions in this block.
          type: number
          example: 7985124
        hash:
          description: Hash of the block. 'null' when its pending block.
          type: string
          example: "0x5d40698ee1b1ec589035f2a39c6162287e9056868cc79d66cfb248ba9f66c3fc"
        logsBloom:
          description: The bloom filter for the logs of the block. 'null' when its pending block.
          type: string
          example: "0x042080004210492080800001610060ad9600005bc81502020800000043e302020381a404000100409102040240300641108004000400007000008000c049558055a800000a0001800748900806502004200400108205005418c0218802281a0408060000533210462021050470810a010140102809011814018281115020090201068401847000a04010000c00084062000485640d00020220181150020008589105a41c0880001112034100010882545410240011402a3480050104004c310204000002009490d0012022a040c20c20011020401020140250805100410060008280200008181a220114102800001648640828200c00a94c1003a2060e001000"
        miner:
          description: The address of the beneficiary to whom the mining rewards were given.
          type: string
          example: "0xD8869d9E3d497323561Fbca2319a9FC3F6f10c4B"
        mixHash:
          description: ''
          type: string
          example: "0x7a44a1f56f12ae825fdc04550d7c3af2344daab987691771c06235f25fafcaa6"
        nonce:
          description: Hash of the generated proof-of-work. 'null' when its pending block.
          type: string
          example: "0xfa1692f52a7ac672"
        number:
          description: The block number. 'null' when its pending block.
          type: number
          example: 6470657
        parentHash:
          description: Hash of the parent block.
          type: string
          example: "0xd34aab8a455027086ac54034e68608c84d984401a883b7b5d91f9ae0bbefda15"
        receiptsRoot:
          description: ''
          type: string
          example: "0x4a496b6b7f2a1c5850bf9eebbea7193807be0067b1c06f17b9dde4eef7b2f960"
        sha3Uncles:
          description: SHA3 of the uncles data in the block.
          type: string
          example: "0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347"
        size:
          description: The size of this block in bytes.
          type: number
          example: 15296
        stateRoot:
          description: The root of the final state trie of the block.
          type: string
          example: "0x32757c92f10c6c5a106c6fb4b9ca3ff301e413a59ca3d0513b4bf98c72efddba"
        timestamp:
          description: The unix timestamp for when the block was collated.
          type: number
          example: 1569600592
        totalDifficulty:
          description: Total difficulty of the chain until this block.
          type: string
          example: "23329673338013873"
        transactions:
          description: Array of transactions.
          type: array
          items:
            $ref: "#/components/schemas/SolanaTx"
        transactionsRoot:
          description: The root of the transaction trie of the block.
          type: string
          example: "0x5990081ef8515d561b50255af03c5d505f7725ddef27405dc67d23bfd0f47704"
    SolanaTx:
      type: object
      properties:
        blockHash:
          description: Hash of the block where this transaction was in.
          type: string
          example: "0xcf2c40f475e78c7c19778e1ae999a0e371c9319b38182ea15dc94536f13f9137"
        status:
          type: boolean
          example: true
          description: TRUE if the transaction was successful, FALSE, if the EVM reverted the transaction.
        blockNumber:
          type: number
          description: Block number where this transaction was in.
          example: 6470854
        from:
          type: string
          description: Address of the sender.
          example: "0x81b7E08F65Bdf5648606c89998A9CC8164397647"
        gas:
          type: number
          description: Gas provided by the sender.
          example: 21000
        gasPrice:
          type: string
          description: Gas price provided by the sender in wei.
          example: "1000000000"
        transactionHash:
          type: string
          description: Hash of the transaction.
          example: "0xe6e7340394958674cdf8606936d292f565e4ecc476aaa8b258ec8a141f7c75d7"
        input:
          type: string
          description: The data sent along with the transaction.
          example: "0x"
        nonce:
          type: number
          description: The number of transactions made by the sender prior to this one.
          example: 26836405
        to:
          type: string
          description: Address of the receiver. 'null' when its a contract creation transaction.
          example: "0xbC546fa1716Ed886967cf73f40e8F2F5e623a92d"
        transactionIndex:
          type: number
          description: Integer of the transactions index position in the block.
          example: 3
        value:
          type: string
          description: Value transferred in wei.
          example: "1000000000000000000"
        gasUsed:
          type: number
          description: The amount of gas used by this specific transaction alone.
          example: 21000
        cumulativeGasUsed:
          type: number
          description: The total amount of gas used when this transaction was executed in the block.
          example: 314159
        contractAddress:
          type: string
          description: The contract address created, if the transaction was a contract creation, otherwise null.
          example: "0x81b7E08F65Bdf5648606c89998A9CC8164397647"
        logs:
          type: array
          description: Log events, that happened in this transaction.
          items:
            type: object
            properties:
              address:
                type: string
                description: From which this event originated from.
                example: "0x81b7E08F65Bdf5648606c89998A9CC8164397647"
              topics:
                type: array
                description: An array with max 4 32 Byte topics, topic 1-3 contains indexed parameters of the log.
                items:
                  type: string
                  example: "0x033456732123ffff2342342dd12342434324234234fd234fd23fd4f23d4234"
              data:
                type: string
                description: The data containing non-indexed log parameter.
              logIndex:
                type: number
                description: Integer of the event index position in the block.
              blockNumber:
                type: number
                description: Block number where this transaction was in.
                example: 6470854
              blockHash:
                description: Hash of the block.
                type: string
                example: "0x5d40698ee1b1ec589035f2a39c6162287e9056868cc79d66cfb248ba9f66c3fc"
              transactionIndex:
                type: number
                description: Integer of the transaction’s index position, the event was created in.
              transactionHash:
                type: string
                description: Hash of the transaction this event was created in.
                example: "0xe6e7340394958674cdf8606936d292f565e4ecc476aaa8b258ec8a141f7c75d7"
    Error403SolanaBroadcast:
      properties:
        errorCode:
          description: Solana.broadcast.failed
          example: Solana.broadcast.failed
          type: string
        message:
          description: Unable to broadcast transaction due to ${error}.
          example: Unable to broadcast transaction due to ${error}.
          type: string
        statusCode:
          description: "403"
          example: 403
          type: number
      required:
        - errorCode
        - message
        - statusCode
      type: object
    Error403SolanaBep20NotFound:
      properties:
        errorCode:
          description: erc20.token.notFound
          example: erc20.token.notFound
          type: string
        message:
          description: No such ERC20 currency ${name}.
          example: No such ERC20 currency ${name}.
          type: string
        statusCode:
          description: "403"
          example: 403
          type: number
      required:
        - errorCode
        - message
        - statusCode
      type: object
    Error403TxNotFound:
      properties:
        errorCode:
          description: tx.missing
          example: tx.missing
          type: string
        message:
          description: No such tx.
          example: No such tx.
          type: string
        statusCode:
          description: "403"
          example: 403
          type: number
      required:
        - errorCode
        - message
        - statusCode
      type: object
    Error403SolanaBep20Set:
      properties:
        errorCode:
          description: erc20.address.set
          example: erc20.address.set
          type: string
        message:
          description: ERC20 address was already set.
          example: ERC20 address was already set.
          type: string
        statusCode:
          description: "403"
          example: 403
          type: number
      required:
        - errorCode
        - message
        - statusCode
      type: object
    Error403SolanaMnemonicPrivateKey:
      properties:
        errorCode:
          description: private.mnemonic.missing
          example: private.mnemonic.missing
          type: string
        message:
          description: Either mnemonic and index or private key must be present.
          example: Either mnemonic and index or private key must be present.
          type: string
        statusCode:
          description: "403"
          example: 403
          type: number
      required:
        - errorCode
        - message
        - statusCode
      type: object
    Error403SolanaBep20Unsupported:
      properties:
        errorCode:
          description: Solana.bep20.unsupported
          example: Solana.bep20.unsupported
          type: string
        message:
          description: Unsupported ETH ERC20 blockchain.
          example: Unsupported ETH ERC20 blockchain.
          type: string
        statusCode:
          description: "403"
          example: 403
          type: number
      required:
        - errorCode
        - message
        - statusCode
      type: object
    Error403SolanaTxHash:
      properties:
        errorCode:
          description: Solana.transaction.hash
          example: Solana.transaction.hash
          type: string
        message:
          description: Unable to calculate transaction hash. ${error}
          example: Unable to calculate transaction hash. ${error}
          type: string
        statusCode:
          description: "403"
          example: 403
          type: number
      required:
        - errorCode
        - message
        - statusCode
      type: object
    Error403SolanaTxSign:
      properties:
        errorCode:
          description: Solana.transaction.sign
          example: Solana.transaction.sign
          type: string
        message:
          description: Unable to sign transaction. ${error}
          example: Unable to sign transaction. ${error}
          type: string
        statusCode:
          description: "403"
          example: 403
          type: number
      required:
        - errorCode
        - message
        - statusCode
      type: object
    Error403SolanaErc20TxSign:
      properties:
        errorCode:
          description: Solana.bep20.sign
          example: Solana.bep20.sign
          type: string
        message:
          description: Unable to sign transaction for contract creation. ${error}
          example: Unable to sign transaction for contract creation. ${error}
          type: string
        statusCode:
          description: "403"
          example: 403
          type: number
      required:
        - errorCode
        - message
        - statusCode
      type: object
    Error403SolanaGasCalculation:
      properties:
        errorCode:
          description: Solana.transaction.gas
          example: Solana.transaction.gas
          type: string
        message:
          description: Unable to calculate gas limit for transaction. ${error}
          example: Unable to calculate gas limit for transaction. ${error}
          type: string
        statusCode:
          description: "403"
          example: 403
          type: number
      required:
        - errorCode
        - message
        - statusCode
      type: object
    Error403SolanaTxBody:
      properties:
        errorCode:
          description: Solana.transaction.body
          example: Solana.transaction.body
          type: string
        message:
          description: Either currency, or tokenAddress must be defined.
          example: Either currency, or tokenAddress must be defined.
          type: string
        statusCode:
          description: "403"
          example: 403
          type: number
      required:
        - errorCode
        - message
        - statusCode
      type: object
    Error403SolanaScBody:
      properties:
        errorCode:
          description: Solana.sc.invalid
          example: Solana.sc.invalid
          type: string
        message:
          description: Invalid parameters for smart contract invocation.
          example: Invalid parameters for smart contract invocation.
          type: string
        statusCode:
          description: "403"
          example: 403
          type: number
      required:
        - errorCode
        - message
        - statusCode
      type: object
    Error403SolanaGasPrice:
      properties:
        errorCode:
          description: gas.price.failed
          example: gas.price.failed
          type: string
        message:
          description: Unable to obtain current GAS price.
          example: Unable to obtain current GAS price.
          type: string
        statusCode:
          description: "403"
          example: 403
          type: number
      required:
        - errorCode
        - message
        - statusCode
      type: object
    TransferBep20Blockchain:
      type: object
      properties:
        to:
          maxLength: 50
          minLength: 1
          description: Blockchain address to send ERC20 token to
          example: "0x687422eEA2cB73B5d3e242bA5456b782919AFc85"
          type: string
        amount:
          description: Amount to be sent.
          example: "100000"
          type: string
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
        contractAddress:
          maxLength: 42
          minLength: 42
          description: Address of ERC20 token
          example: "0x687422eEA2cB73B5d3e242bA5456b782919AFc85"
          type: string
        digits:
          description: Number of decimal points that ERC20 token has.
          example: 18
          maximum: 30
          minimum: 1
          type: number
        fromPrivateKey:
          type: string
          maxLength: 66
          example: "0x05e150c73f1920ec14caa1e0b6aa09940899678051a78542840c2668ce5080c2"
          minLength: 66
          description: Private key of sender address. Private key, or signature Id must be present.
        nonce:
          type: number
          minimum: 0
          description: Nonce to be set to Solana transaction. If not present, last known nonce will be used.
        fee:
          description: Custom defined fee. If not present, it will be calculated automatically.
          type: object
          required:
            - gasLimit
            - gasPrice
          properties:
            gasLimit:
              type: string
              description: Gas limit for transaction in gas price.
              pattern: ^[+]?\d+$
              example: "40000"
            gasPrice:
              type: string
              description: Gas price in Gwei.
              pattern: ^[+]?\d+$
              example: "20"
      required:
        - to
        - contractAddress
        - digits
        - fromPrivateKey
        - amount
    TransferBep20BlockchainKMS:
      type: object
      properties:
        to:
          maxLength: 50
          minLength: 1
          description: Blockchain address to send ERC20 token to
          example: "0x687422eEA2cB73B5d3e242bA5456b782919AFc85"
          type: string
        amount:
          description: Amount to be sent.
          example: "100000"
          type: string
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
        contractAddress:
          maxLength: 42
          minLength: 42
          description: Address of ERC20 token
          example: "0x687422eEA2cB73B5d3e242bA5456b782919AFc85"
          type: string
        digits:
          description: Number of decimal points that ERC20 token has.
          example: 18
          maximum: 30
          minimum: 1
          type: number
        index:
          type: number
          minimum: 0
          description: If signatureId is mnemonic-based, this is the index to the specific address from that mnemonic.
        signatureId:
          type: string
          minLength: 36
          maxLength: 36
          format: uuid
          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83
          description: Identifier of the private key associated in signing application. Private key, or signature Id must be present.
        nonce:
          type: number
          minimum: 0
          description: Nonce to be set to Solana transaction. If not present, last known nonce will be used.
        fee:
          description: Custom defined fee. If not present, it will be calculated automatically.
          type: object
          required:
            - gasLimit
            - gasPrice
          properties:
            gasLimit:
              type: string
              description: Gas limit for transaction in gas price.
              pattern: ^[+]?\d+$
              example: "40000"
            gasPrice:
              type: string
              description: Gas price in Gwei.
              pattern: ^[+]?\d+$
              example: "20"
      required:
        - to
        - contractAddress
        - signatureId
        - digits
        - amount
    CallSolanaSmartContractMethod:
      type: object
      properties:
        contractAddress:
          maxLength: 42
          minLength: 42
          description: Address of ERC20 token
          example: "0x687422eEA2cB73B5d3e242bA5456b782919AFc85"
          type: string
        amount:
          description: Amount of the assets to be sent.
          example: "100000"
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
          type: string
        methodName:
          minLength: 1
          maxLength: 500
          description: Name of the method to invoke on smart contract.
          type: string
          example: transfer
        methodABI:
          type: object
          example: {
            "inputs": [
              {
                "internalType": "uint256",
                "name": "amount",
                "type": "uint256"
              }
            ],
            "name": "stake",
            "outputs": [ ],
            "stateMutability": "nonpayable",
            "type": "function"
          }
          description: ABI of the method to invoke.
        params:
          type: array
          example: [ '0x632' ]
          items:
            type: object
            description: Parameters of the method to be invoked
        fromPrivateKey:
          type: string
          maxLength: 66
          example: "0x05e150c73f1920ec14caa1e0b6aa09940899678051a78542840c2668ce5080c2"
          minLength: 66
          description: Private key of sender address. Private key, or signature Id must be present.
        nonce:
          type: number
          minimum: 0
          description: Nonce to be set to Solana transaction. If not present, last known nonce will be used.
        fee:
          description: Custom defined fee. If not present, it will be calculated automatically.
          type: object
          required:
            - gasLimit
            - gasPrice
          properties:
            gasLimit:
              type: string
              description: Gas limit for transaction in gas price.
              pattern: ^[+]?\d+$
              example: "40000"
            gasPrice:
              type: string
              description: Gas price in Gwei.
              pattern: ^[+]?\d+$
              example: "20"
      required:
        - contractAddress
        - params
        - methodABI
        - fromPrivateKey
        - methodName
    CallSolanaSmartContractReadMethod:
      type: object
      properties:
        contractAddress:
          maxLength: 42
          minLength: 42
          description: Address of ERC20 token
          example: "0x687422eEA2cB73B5d3e242bA5456b782919AFc85"
          type: string
        methodName:
          minLength: 1
          maxLength: 500
          description: Name of the method to invoke on smart contract.
          type: string
          example: transfer
        methodABI:
          type: object
          example: {
            "inputs": [
              {
                "internalType": "uint256",
                "name": "amount",
                "type": "uint256"
              }
            ],
            "name": "stake",
            "outputs": [ ],
            "stateMutability": "nonpayable",
            "type": "function"
          }
          description: ABI of the method to invoke.
        params:
          type: array
          example: [ '0x632' ]
          items:
            type: object
            description: Parameters of the method to be invoked
      required:
        - contractAddress
        - params
        - methodABI
        - methodName
    CallSolanaSmartContractMethodKMS:
      type: object
      properties:
        contractAddress:
          maxLength: 42
          minLength: 42
          description: Address of ERC20 token
          example: "0x687422eEA2cB73B5d3e242bA5456b782919AFc85"
          type: string
        methodName:
          minLength: 1
          maxLength: 500
          description: Name of the method to invoke on smart contract.
          type: string
          example: transfer
        methodABI:
          type: object
          description: ABI of the method to invoke.
        params:
          type: array
          items:
            type: object
          description: Parameters of the method to be invoked.
        index:
          type: number
          minimum: 0
          description: If signatureId is mnemonic-based, this is the index to the specific address from that mnemonic.
        signatureId:
          type: string
          minLength: 36
          maxLength: 36
          format: uuid
          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83
          description: Identifier of the private key associated in signing application. Private key, or signature Id must be present.
        nonce:
          type: number
          minimum: 0
          description: Nonce to be set to Solana transaction. If not present, last known nonce will be used.
        fee:
          description: Custom defined fee. If not present, it will be calculated automatically.
          type: object
          required:
            - gasLimit
            - gasPrice
          properties:
            gasLimit:
              type: string
              description: Gas limit for transaction in gas price.
              pattern: ^[+]?\d+$
              example: "40000"
            gasPrice:
              type: string
              description: Gas price in Gwei.
              pattern: ^[+]?\d+$
              example: "20"
      required:
        - contractAddress
        - params
        - methodABI
        - signatureId
        - methodName
    TransferSolanaBlockchain:
      type: object
      properties:
        data:
          type: string
          maxLength: 50000
          description: Additinal data, that can be passed to blockchain transaction as data property. Only for ETH transactions.
          example: My note to recipient.
        nonce:
          type: number
          minimum: 0
          description: Nonce to be set to Solana transaction. If not present, last known nonce will be used.
        to:
          description: Blockchain address to send assets
          example: "0x687422eEA2cB73B5d3e242bA5456b782919AFc85"
          maxLength: 42
          minLength: 42
          type: string
        currency:
          description: Currency to transfer from Solana Blockchain Account. ERC20 tokens USDC and USDT are available only for mainnet use.
          enum:
            - SOL
            - USDC_SOL
            - USDT_SOL
          example: SOL
          type: string
        fee:
          description: Custom defined fee. If not present, it will be calculated automatically.
          type: object
          required:
            - gasLimit
            - gasPrice
          properties:
            gasLimit:
              type: string
              description: Gas limit for transaction in gas price.
              example: "40000"
              pattern: ^[+]?\d+$
            gasPrice:
              type: string
              description: Gas price in Gwei.
              example: "20"
              pattern: ^[+]?\d+$
        amount:
          description: Amount to be sent in Ether.
          example: "100000"
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
          type: string
        fromPrivateKey:
          type: string
          maxLength: 66
          example: "0x05e150c73f1920ec14caa1e0b6aa09940899678051a78542840c2668ce5080c2"
          minLength: 66
          description: Private key of sender address. Private key, or signature Id must be present.
      required:
        - to
        - amount
        - currency
        - fromPrivateKey
    SolanaEstimateGas:
      type: object
      properties:
        from:
          type: string
          maxLength: 66
          example: "0xfb99f8ae9b70a0c8cd96ae665bbaf85a7e01a2ef"
          minLength: 66
          description: Sender address.
        to:
          description: Blockchain address to send assets
          example: "0x687422eEA2cB73B5d3e242bA5456b782919AFc85"
          maxLength: 42
          minLength: 42
          type: string
        amount:
          description: Amount to be sent in Ether.
          example: "100000"
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
          type: string
        data:
          type: string
          maxLength: 50000
          description: Additinal data, that can be passed to blockchain transaction as data property. Only for ETH transactions.
          example: My note to recipient.
          pattern: ^(0x|0h)?[0-9A-F]+$
      required:
        - to
        - amount
        - from
    TransferSolanaBlockchainKMS:
      type: object
      properties:
        data:
          type: string
          maxLength: 50000
          description: Additinal data, that can be passed to blockchain transaction as data property. Only for ETH transactions.
          example: My note to recipient.
        nonce:
          type: number
          minimum: 0
          description: Nonce to be set to Solana transaction. If not present, last known nonce will be used.
        to:
          description: Blockchain address to send assets
          example: "0x687422eEA2cB73B5d3e242bA5456b782919AFc85"
          maxLength: 42
          minLength: 42
          type: string
        currency:
          description: Currency to transfer from Solana Blockchain Account. ERC20 tokens BETH, BBTC, BADA, WMATIC, BDOT, BXRP, BLTC, BBCH, SOL are available only for mainnet use.
          enum:
            - BETH
            - BBTC
            - BADA
            - WMATIC
            - BDOT
            - BXRP
            - BLTC
            - BBCH
            - MATIC
            - SOL
          example: SOL
          type: string
        fee:
          description: Custom defined fee. If not present, it will be calculated automatically.
          type: object
          required:
            - gasLimit
            - gasPrice
          properties:
            gasLimit:
              type: string
              description: Gas limit for transaction in gas price.
              example: "40000"
              pattern: ^[+]?\d+$
            gasPrice:
              type: string
              description: Gas price in Gwei.
              example: "20"
              pattern: ^[+]?\d+$
        amount:
          description: Amount to be sent in Ether.
          example: "100000"
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
          type: string
        index:
          type: number
          minimum: 0
          description: If signatureId is mnemonic-based, this is the index to the specific address from that mnemonic.
        signatureId:
          type: string
          minLength: 36
          maxLength: 36
          format: uuid
          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83
          description: Identifier of the private key associated in signing application. Private key, or signature Id must be present.
      required:
        - to
        - amount
        - currency
        - signatureId
    DeployBep20:
      type: object
      properties:
        symbol:
          description: Symbol of the ERC20 token
          example: ERC_SYMBOL
          maxLength: 30
          minLength: 1
          type: string
        name:
          description: Name of the ERC20 token
          example: My ERC20
          maxLength: 100
          minLength: 1
          pattern: ^[a-zA-Z0-9_]+$
          type: string
        totalCap:
          description: Max supply of ERC20 token.
          maxLength: 38
          example: "10000000"
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
          type: string
        supply:
          description: Max supply of ERC20 token.
          maxLength: 38
          example: "10000000"
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
          type: string
        digits:
          description: Number of decimal points
          example: 18
          maximum: 30
          minimum: 1
          type: number
        address:
          description: Address on Solana blockchain, where all created ERC20 tokens will be transferred.
          maxLength: 42
          minLength: 42
          example: "0xa0Ca9FF38Bad06eBe64f0fDfF279cAE35129F5C6"
          type: string
        fromPrivateKey:
          description: Private key of Solana account address, from which the fee for the deployment of ERC20 will be paid. Private key, or signature Id must be present.
          type: string
          example: "0x05e150c73f1920ec14caa1e0b6aa09940899678051a78542840c2668ce5080c2"
          maxLength: 66
          minLength: 66
        nonce:
          type: number
          minimum: 0
          description: Nonce to be set to Solana transaction. If not present, last known nonce will be used.
        fee:
          description: Custom defined fee. If not present, it will be calculated automatically.
          type: object
          required:
            - gasLimit
            - gasPrice
          properties:
            gasLimit:
              type: string
              description: Gas limit for transaction in gas price.
              pattern: ^[+]?\d+$
              example: "40000"
            gasPrice:
              type: string
              description: Gas price in Gwei.
              pattern: ^[+]?\d+$
              example: "20"
      required:
        - name
        - symbol
        - address
        - supply
        - fromPrivateKey
        - digits
    DeployBep20KMS:
      type: object
      properties:
        symbol:
          description: Symbol of the ERC20 token
          example: ERC_SYMBOL
          maxLength: 30
          minLength: 1
          type: string
        name:
          description: Name of the ERC20 token
          example: My ERC20
          maxLength: 100
          minLength: 1
          pattern: ^[a-zA-Z0-9_]+$
          type: string
        totalCap:
          description: Max supply of ERC20 token.
          maxLength: 38
          example: "10000000"
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
          type: string
        supply:
          description: Max supply of ERC20 token.
          maxLength: 38
          example: "10000000"
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
          type: string
        digits:
          description: Number of decimal points
          example: 18
          maximum: 30
          minimum: 1
          type: number
        address:
          description: Address on Solana blockchain, where all created ERC20 tokens will be transferred.
          maxLength: 42
          minLength: 42
          example: "0xa0Ca9FF38Bad06eBe64f0fDfF279cAE35129F5C6"
          type: string
        index:
          type: number
          minimum: 0
          description: If signatureId is mnemonic-based, this is the index to the specific address from that mnemonic.
        signatureId:
          type: string
          minLength: 36
          maxLength: 36
          format: uuid
          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83
          description: Identifier of the private key associated in signing application. Private key, or signature Id must be present.
        nonce:
          type: number
          minimum: 0
          description: Nonce to be set to Solana transaction. If not present, last known nonce will be used.
        fee:
          description: Custom defined fee. If not present, it will be calculated automatically.
          type: object
          required:
            - gasLimit
            - gasPrice
          properties:
            gasLimit:
              type: string
              description: Gas limit for transaction in gas price.
              pattern: ^[+]?\d+$
              example: "40000"
            gasPrice:
              type: string
              description: Gas price in Gwei.
              pattern: ^[+]?\d+$
              example: "20"
      required:
        - name
        - symbol
        - address
        - supply
        - signatureId
        - digits
